🔢 Function Definition
cpp
Copy
Edit
class Solution {
public:
    string addBinary(string a, string b) {
This is the addBinary method inside the Solution class (as per LeetCode format).

It takes two binary strings a and b.

Returns a new binary string which is the sum of a and b.

🧮 Initialization
cpp
Copy
Edit
        string res;
        int carry = 0;
        int i = a.length() - 1;
        int j = b.length() - 1;
res will store the final result (in reverse initially).

carry stores the carry-over during binary addition.

i points to the last character (LSB) of string a.

j points to the last character (LSB) of string b.

🔁 Loop: Add Digits from Right to Left
cpp
Copy
Edit
        while(i >= 0 || j >= 0){
Loop until both strings are fully processed.

➕ Add Current Digits and Carry
cpp
Copy
Edit
            int sum = carry;
Start with the carry from the previous step.

cpp
Copy
Edit
            if(i >= 0)
            {
                sum += (a[i] - '0');
                i--;
            }
If there's still a digit left in a, add it to sum.

a[i] - '0' converts the character '1' or '0' to integer 1 or 0.

Decrement i to move to the next digit on the left.

cpp
Copy
Edit
            if(j >= 0){
                sum += (b[j] - '0');
                j--;
            }
Same logic for b.

🔢 Determine Carry for Next Step
cpp
Copy
Edit
            if(sum >= 2){
                carry = 1;
            }
            else{
                carry = 0;
            }
If sum is 2 or 3 → carry = 1.

1 + 1 = 10 (carry 1)

1 + 1 + 1 = 11 (carry 1)

If sum is 0 or 1 → carry = 0.

🧪 Append Current Binary Digit
cpp
Copy
Edit
            res += to_string(sum % 2);
Binary result for this position = sum % 2

Example: sum = 3 → 3 % 2 = 1

Append the digit to the result string res.

🔁 The result is built in reverse order (from LSB to MSB).

🧩 After Loop: Add Remaining Carry
cpp
Copy
Edit
        if(carry == 1){
            res += to_string(carry);
        }
After the loop ends, if there's a remaining carry, add it to the result.

🔁 Reverse and Return the Result
cpp
Copy
Edit
        reverse(res.begin(), res.end());
        return res;
    }
};
The result string res was built backwards, so reverse it before returning.

Return the final binary sum string.
